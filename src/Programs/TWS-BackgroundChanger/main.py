from CoreLib.Windows.windowClass import * # Import the library like this

global SetThemeColors
from CoreLib.setcolor import SetThemeColors

#	Import other libraries like this:

global datetime
import datetime

global re
import re

from pathlib import Path
global Path

global msg
msg = "Changed Config"

global theme_buttons
global color_buttons

color_buttons = [
"blue_button",
"black_button",
"cyan_button",
"green_button",
"magenta_button",
"red_button",
"white_button",
"yellow_button"
]

theme_buttons = [
"light_button",
"dark_button"
]

#	The main function
def mainWinFunction(window, key, clickedButton):
    SetThemeColors()
    global color
    global lines
    global theme
    global change
    f3 = open("config.cfg", "r")
    config = f3.readlines()
    theme = config[2]
    color = config[1]
    if clickedButton != 0: # If you have clicked a button
#	If the ID of the button being clicked is "closeButton", close the window. (It's highly recommended to include a button the close the window in each program)
        if clickedButton["widgetID"] == "closeButton":
            window.closeWindow() # Close the window
        else: #If we aren't closing the window

#	Set Background Colors
            if clickedButton["widgetID"] in color_buttons:
                color = "COLOR:"+ (clickedButton["widgetID"].split("_"))[0]
                change = "colors"

#	Set Window Themes
            elif clickedButton["widgetID"] in theme_buttons:
                theme = "THEME:"+(clickedButton["widgetID"].split("_"))[0]
                change = "theme"

#	Write to file
            with open("config.cfg", "r") as f:
                lines = f.readlines()

#	Test if we are changing the background on the desktop
            if change == "colors":
                lines[1] = f"{color}\n"

#	Test if we are changing the window theme
            elif change == "theme":
                lines[2] = f"{theme}\n"

#	Run something if it is nothing, it'll probably crash, but this code shouldn't ever even be called
            else:
                lines[1] = f"{color}\n"

#	Add a message at the top of the config file
            lines[0] = "This File Is Automatically Generated By TWS-Settings, Do Not Edit This File!\n"

#	Write the changes to the file (only what is different)
            with open("config.cfg", "w") as f:
                f.writelines(lines)   
                f.close()

#	Display the conformation message that we in fact did change the configuration
            window.getWidgetByID("Config_Update")["text"] = msg

'''
Ran on initilization to set up the widgets
'''           

mainWin = Window("TWS-Settings", mainWinFunction) # Create a window
mainWin.addMenuButton("closeButton", 0, "Close Window") # Create a menu button with the ID of "closeButton"
mainWin.addTitle("", 2, 2, " Change System Settings ") # Add a title with an id of "Config_Update"
mainWin.addLabel("Config_Update", 4, 2, "") # Add a label with an id of "Config_Update"

#	Color Labels
mainWin.addLabel("Colors_Header", 5, 2, "*Colors*") # Add a label with an id of "Colors_Header"
mainWin.addButton("blue_button", 6, 2, "Blue") # Add a button with an id of "blue_button"
mainWin.addButton("black_button", 7, 2, "Black") # Add a button with an id of "black_button"
mainWin.addButton("cyan_button", 8, 2, "Cyan") # Add a button with an id of "cyan_button"
mainWin.addButton("green_button", 9, 2, "Green") # Add a button with an id of "green_button"
mainWin.addButton("magenta_button", 10, 2, "Magenta") # Add a button with an id of "magenta_button"
mainWin.addButton("red_button", 11, 2, "Red") # Add a button with an id of "red_button"
mainWin.addButton("white_button", 12, 2, "White") # Add a button with an id of "white_button"
mainWin.addButton("yellow_button", 13, 2, "Yellow") # Add a button with an id of "yellow_button"

#	Theme Labels
mainWin.addLabel("Themes_Header", 15, 2, "*Themes*") # Add a label with an id of "Themes_Header"
mainWin.addButton("light_button", 16, 2, "Light") # Add a button with an id of "light_button"
mainWin.addButton("dark_button", 17, 2, "Dark") # Add a button with an id of "dark_button"

#	The Totally Secret Credits
mainWin.addLabel("credits_01", 100, 2, "Why did you scroll this far.") # Add a label with an id of "credits_01"
mainWin.addLabel("credits_02", 105, 2, "CREDITS:") # Add a label with an id of "credits_02"
mainWin.addLabel("credits_03", 107, 2, "Nathan Macleod: Writing most of the entire windowing system, and most of the apps") # Add a label with an id of "credits_03"
mainWin.addLabel("credits_04", 109, 2, "RobiTheGit: Writing this app, a file manager, fixing some bugs, and some other things") # Add a label with an id of "credits_04"
mainWin.addLabel("credits_05", 111, 2, "Jacob Macleod: Doing something?") # Add a label with an id of "credits_05"
